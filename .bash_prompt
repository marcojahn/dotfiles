#!/usr/bin/env bash

# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://i.imgur.com/EkEtphC.png
# Heavily inspired by @necolasâ€™s prompt: https://github.com/necolas/dotfiles
# iTerm â†’ Profiles â†’ Text â†’ use 13pt Monaco with 1.1 vertical spacing.

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM='xterm-256color';
fi;

prompt_git() {
	local s='';
	local branchName='';
	local marks='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+="?";
			fi;
			# ðŸ“¦ \U1F4E6
			# Â± \u00b1
			# branch/upwards \ue0a0
			# âž¦ \u27a6
			# âœ˜ \u2718
			# âš¡ \u26a1
			# âš™ \u2699
			# âŽ‡ \u2387
			# â¬¢ \U2B22
			#
			# âœ” is from https://unicode-table.com/en/blocks/dingbats/
			# â‡¡ 
			# 	https://unicode-table.com/en/blocks/arrows/
			#	https://unicode-table.com/en/sets/arrows-symbols/

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;

			## diff checks (new)
			# 

		        # branch is modified?
		        [ -n "$(git status --porcelain)" ] && marks+=" $GIT_BRANCH_CHANGED_SYMBOL"

		        # how many commits local branch is ahead/behind of remote?
		        local stat="$(git status --porcelain --branch | grep '^##' | grep -o '\[.\+\]$')"
		        local aheadN="$(echo $stat | grep -o 'ahead [[:digit:]]\+' | grep -o '[[:digit:]]\+')"
		        local behindN="$(echo $stat | grep -o 'behind [[:digit:]]\+' | grep -o '[[:digit:]]\+')"
		        [ -n "$aheadN" ] && marks+=" \u21e1${aheadN}"
		        [ -n "$behindN" ] && marks+=" \u21e3${behindN}"

		fi;

		# Get the short symbolic ref.
		# If HEAD isnâ€™t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" [${s}]";

		echo -e "${1}\ue0a0 ${branchName}${2}${s}${marks}";
	else
		return;
	fi;
}

prompt_project_infos() {
	local PACKAGE_VERSION='';
	local RUNTIME_VERSION='';

	#if ! [ -x "$(command -v git)" ]; then
	#  echo 'Error: git is not installed.' >&2
	#  exit 1
	#fi

	# js project
	if [ -e package.json ]; then
		if [ -x "$(command -v node)" ]; then
			PACKAGE_VERSION="$(node -p -e "require('./package.json').version")"
			RUNTIME_VERSION="$(node --version)"
		fi;

		echo -e "${white} is \U1F4E6 ${blue}${PACKAGE_VERSION} ${white}via ${green}\U2B22 ${RUNTIME_VERSION}";
	fi;

	# java/maven project
	if [ -e pom.xml ]; then
		if [ -x "$(command -v java)" ]; then
			# mvn help:evaluate -Dexpression=project.version | grep -v '^['
			# or
			# grep version pom.xml | grep -v -e '<?xml|~'| head -n 1 | sed 's///' | sed 's/</version>//'| awk '{print $1}'
			PACKAGE_VERSION="mvn-ver"
			RUNTIME_VERSION="$(java -version 2>&1 | sed -n ';s/.* version "\(.*\)"/\1/p;')"
		fi;

		echo -e "${white} is \U1F4E6 ${blue}${PACKAGE_VERSION} ${white}via ${green}\u2615 ${RUNTIME_VERSION}";
	fi;

	# java/gradle project
	#if [ -z `ls .gradle` ]; then
	#	if [ -x "$(command -v java)" ]; then
	#		PACKAGE_VERSION="gradle-ver"
	#		RUNTIME_VERSION="$(java -version 2>&1 | sed -n ';s/.* version "\(.*\)"/\1/p;')"
	#	fi;
	#
	#	echo -e "${white} is \U1F4E6 ${blue}${PACKAGE_VERSION} ${white}via ${green}\u2615 ${RUNTIME_VERSION}";
	#fi

	# PACKAGE_VERSION='0';
	# RUNTIME_VERSION="$(java -version 2>&1 | sed -n ';s/.* version "\(.*\)"/\1/p;')"
}

if tput setaf 1 &> /dev/null; then
	tput sgr0; # reset colors
	bold=$(tput bold);
	reset=$(tput sgr0);
	# Solarized colors, taken from http://git.io/solarized-colors.
	black=$(tput setaf 0);
	blue=$(tput setaf 33);
	cyan=$(tput setaf 37);
	green=$(tput setaf 64);
	orange=$(tput setaf 166);
	purple=$(tput setaf 125);
	red=$(tput setaf 124);
	violet=$(tput setaf 61);
	white=$(tput setaf 15);
	yellow=$(tput setaf 136);
else
	bold='';
	reset="\e[0m";
	black="\e[1;30m";
	blue="\e[1;34m";
	cyan="\e[1;36m";
	green="\e[1;32m";
	orange="\e[1;33m";
	purple="\e[1;35m";
	red="\e[1;31m";
	violet="\e[1;35m";
	white="\e[1;37m";
	yellow="\e[1;33m";
fi;

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="${red}";
else
	userStyle="${orange}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	hostStyle="${bold}${red}";
else
    hostStyle="${yellow}";
fi;

# Set the terminal title and prompt.
PS1="\[\033]0;\W\007\]"; # working directory base name

#PS1+="\[${bold}\]\n"; # newline
PS1+="\n";

PS1+="\${userStyle}\]\u"; # username
PS1+="\[${white}\] at ";
PS1+="\[${hostStyle}\]\h (${LOCATION})"; # host
PS1+="\[${white}\] in ";
PS1+="\[${green}\]\w"; # working directory full path
PS1+="\$(prompt_git \"\[${white}\] on \[${violet}\]\" \"\[${blue}\]\")"; # Git repository details
PS1+="\$(prompt_project_infos)";
PS1+="\n";
PS1+="\[${white}\]\$ \[${reset}\]"; # `$` (and reset color)
export PS1;

PS2="\[${yellow}\]â†’ \[${reset}\]";
export PS2;
